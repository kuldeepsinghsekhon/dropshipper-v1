{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Page, FormLayout, Form, Link, Button, InlineError, Select, Card, TextField, Layout, Toast } from '@shopify/polaris';\nimport { CirclePlusMinor } from '@shopify/polaris-icons';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react'; //import {loadStripe} from '@stripe/stripe-js';\n//import CardForm from '../components/CardForm';\n\nimport store from 'store-js';\n\nconst axios = require('axios'); //const stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\n\n\nexport default class Singin extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: '',\n      password: '',\n      roleselected: '',\n      emailisInvalid: false,\n      isInvalidPassword: false,\n      isInvalidRole: false,\n      errorMessageEmail: '',\n      errorMessagePassword: '',\n      errorMessageRole: '',\n      successMessageactive: false\n    });\n  }\n\n  // static contextTypes = {\n  //   polaris: Prop.object\n  // };\n  toggleSuccessActive() {\n    this.setState({\n      successMessageactive: !this.state.successMessageactive\n    });\n  }\n\n  handleSubmit() {\n    const {\n      email,\n      password,\n      roleselected\n    } = this.state;\n\n    if (roleselected == '') {\n      this.setState({\n        isInvalidRole: true\n      });\n      return;\n    }\n\n    const user = {\n      email: email,\n      password: password,\n      role: roleselected\n    };\n    const app = this.context;\n    const redirect = Redirect.create(app); //console.log([user])\n\n    axios.post('https://aladdin-dropshipper-server.herokuapp.com/signin', {\n      email: email,\n      password: password,\n      role: roleselected\n    }).then(response => {\n      console.log(response.token);\n      this.setState({\n        email: '',\n        password: ''\n      });\n      store.set('userRole', roleselected); // store.set('firstName',firstName)\n      // store.set('lastName',firstName)\n\n      this.toggleSuccessActive();\n      return redirect.dispatch(Redirect.Action.APP, '/selling_products');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  handlePasswordChange(value) {\n    if (value.length < 3) {\n      this.setState({\n        passwordisInvalid: true\n      });\n    }\n\n    if (value.length > 3) {\n      this.setState({\n        passwordisInvalid: false\n      });\n    }\n\n    let errorMessage = this.state.passwordisInvalid ? 'Enter 3 or more characters' : '';\n    console.log(value);\n    this.setState({\n      password: value,\n      errorMessagePassword: errorMessage\n    });\n  }\n\n  handleEmailChange(value) {\n    if (value.length < 3) {\n      this.setState({\n        emailisInvalid: true\n      });\n    }\n\n    if (value.length > 3) {\n      this.setState({\n        emailisInvalid: false\n      });\n    }\n\n    let errorMessage = this.state.emailisInvalid ? 'Enter 3 or more characters ' : '';\n    console.log(value);\n    this.setState({\n      email: value,\n      errorMessageEmail: errorMessage\n    });\n  }\n\n  handleRoleChange(value) {\n    console.log(value);\n    this.setState({\n      roleselected: value\n    });\n  }\n\n  render() {\n    const {\n      email,\n      password,\n      roleselected,\n      errorMessageEmail,\n      errorMessagePassword,\n      errorMessageRole,\n      isInvalidPassword,\n      emailisInvalid,\n      successMessageactive,\n      isInvalidRole\n    } = this.state;\n    const toastMarkup = successMessageactive ? __jsx(Toast, {\n      content: \" Successfully Signin\",\n      onDismiss: () => this.toggleSuccessActive()\n    }) : null;\n    return __jsx(Page, {\n      title: \"Signin\",\n      separator: true\n    }, toastMarkup, __jsx(Form, {\n      onSubmit: () => this.handleSubmit()\n    }, __jsx(FormLayout, null, __jsx(TextField, {\n      value: email,\n      onChange: value => this.handleEmailChange(value),\n      label: \"Email\",\n      type: \"email\",\n      error: emailisInvalid,\n      id: \"email\",\n      helpText: __jsx(\"span\", null, \"Enter your email Address.\")\n    }), __jsx(\"div\", {\n      style: {\n        marginTop: '4px'\n      }\n    }, __jsx(InlineError, {\n      message: errorMessageEmail,\n      fieldID: 'email'\n    })), __jsx(TextField, {\n      value: password,\n      onChange: value => this.handlePasswordChange(value),\n      label: \"Password\",\n      type: \"password\",\n      error: isInvalidPassword,\n      id: \"password\",\n      helpText: __jsx(\"span\", null, \"Enter your Password.\")\n    }), __jsx(\"div\", {\n      style: {\n        marginTop: '4px'\n      }\n    }, __jsx(InlineError, {\n      message: errorMessagePassword,\n      fieldID: 'password'\n    })), __jsx(Select, {\n      label: \"Select Role\",\n      options: [{\n        label: 'Select Role',\n        value: ''\n      }, {\n        label: 'Seller',\n        value: 'seller'\n      }, {\n        label: 'DropShipper',\n        value: 'dropshipper'\n      }],\n      id: \"role\",\n      error: isInvalidRole,\n      selected: roleselected,\n      onChange: value => this.handleRoleChange(value)\n    }), __jsx(\"div\", {\n      style: {\n        marginTop: '4px'\n      }\n    }, __jsx(InlineError, {\n      message: 'Select Role ',\n      fieldID: 'role'\n    })), __jsx(Button, {\n      submit: true\n    }, \"Sign In\"), __jsx(Link, {\n      url: \"/signup\"\n    }, \"Not Resgistered?\"))));\n  }\n\n}\n\n_defineProperty(Singin, \"contextType\", Context);","map":{"version":3,"sources":["C:/Users/kuldeep/Downloads/aladdin-dropshiper-local/pages/index.js"],"names":["React","Page","FormLayout","Form","Link","Button","InlineError","Select","Card","TextField","Layout","Toast","CirclePlusMinor","Elements","Redirect","Context","store","axios","require","Singin","Component","email","password","roleselected","emailisInvalid","isInvalidPassword","isInvalidRole","errorMessageEmail","errorMessagePassword","errorMessageRole","successMessageactive","toggleSuccessActive","setState","state","handleSubmit","user","role","app","context","redirect","create","post","then","response","console","log","token","set","dispatch","Action","APP","catch","error","handlePasswordChange","value","length","passwordisInvalid","errorMessage","handleEmailChange","handleRoleChange","render","toastMarkup","marginTop","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Page,FormLayout,Form, Link,Button, InlineError ,Select, Card, TextField, Layout,Toast} from '@shopify/polaris';\nimport {CirclePlusMinor} from '@shopify/polaris-icons';\nimport {Elements} from '@stripe/react-stripe-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n//import {loadStripe} from '@stripe/stripe-js';\n//import CardForm from '../components/CardForm';\nimport store from 'store-js';\nconst axios = require('axios')\n//const stripePromise = loadStripe(\"pk_test_TYooMQauvdEDq54NiTphI7jx\");\nexport default class Singin extends React.Component {\n  static contextType = Context;\n  state = {  \n      email:'',\n      password:'',\n      roleselected:'',\n      emailisInvalid:false,\n      isInvalidPassword:false,\n      isInvalidRole:false,\n      errorMessageEmail:'',\n      errorMessagePassword:'',\n      errorMessageRole:'',\n      successMessageactive:false\n    };\n    // static contextTypes = {\n    //   polaris: Prop.object\n    // };\n    toggleSuccessActive(){\n      this.setState({successMessageactive:!this.state.successMessageactive})\n   }\n    handleSubmit(){  \n      const{email,password,roleselected}=this.state;\n     if(roleselected==''){\n      this.setState({ isInvalidRole:true})\n      return\n     }\n      const user={email:email,password:password,role:roleselected};\n      const app = this.context;\n      const redirect = Redirect.create(app);\n      //console.log([user])\n      axios.post('https://aladdin-dropshipper-server.herokuapp.com/signin', {email:email,password:password,role:roleselected} )\n      .then( (response)=>{\n        console.log(response.token);\n        this.setState({email:'',  password:'' })\n        store.set('userRole',roleselected)\n       // store.set('firstName',firstName)\n       // store.set('lastName',firstName)\n         this.toggleSuccessActive();\n         return  redirect.dispatch(\n           Redirect.Action.APP,\n           '/selling_products',\n         );\n      })\n      .catch(function (error) {\n        console.log(error);\n      });   \n     }\n\n    handlePasswordChange(value){\n      if(value.length < 3){\n        this.setState({passwordisInvalid:true})\n      }\n      if(value.length > 3){\n        this.setState({passwordisInvalid:false})\n      }\n     let errorMessage = this.state.passwordisInvalid\n  ? 'Enter 3 or more characters'\n  : '';\n\n      console.log(value)\n      this.setState({password:value,errorMessagePassword:errorMessage})\n    }\n    handleEmailChange(value){\n      if(value.length < 3){\n        this.setState({emailisInvalid:true})\n      }\n      if(value.length > 3){\n        this.setState({emailisInvalid:false})\n      }\n     let errorMessage = this.state.emailisInvalid\n  ? 'Enter 3 or more characters '\n  : '';\n\n      console.log(value)\n      this.setState({email:value,errorMessageEmail:errorMessage})\n  }\n     \n  handleRoleChange(value){\n    console.log(value)\n    this.setState({roleselected:value})\n  }\n    render() {\n      const{email,password,roleselected,errorMessageEmail,errorMessagePassword,errorMessageRole,isInvalidPassword,emailisInvalid,successMessageactive,isInvalidRole }=this.state;\n      const toastMarkup = successMessageactive ? (\n        <Toast content=\" Successfully Signin\" onDismiss={()=>this.toggleSuccessActive()} />\n      ) : null;\n    return (\n      <Page title=\"Signin\" separator>  \n      {toastMarkup}   \n<Form onSubmit={()=>this.handleSubmit()}>\n    <FormLayout>\n    \n   \n   \n      <TextField\n        value={email}\n        onChange={(value) => this.handleEmailChange(value)}\n        label=\"Email\"\n        type=\"email\"\n        error={emailisInvalid}\n        id=\"email\"\n        helpText={\n          <span>\n            Enter your email Address.\n          </span>\n        }\n      />\n        <div style={{marginTop: '4px'}}>\n        <InlineError message={errorMessageEmail} fieldID={'email'} />\n      </div>\n           <TextField\n        value={password}\n        onChange={(value) => this.handlePasswordChange(value)}\n        label=\"Password\"\n        type=\"password\"\n        error={isInvalidPassword}\n        id=\"password\"\n        helpText={\n          <span>\n            Enter your Password.\n          </span>\n        }\n      />\n       <div style={{marginTop: '4px'}}>\n        <InlineError message={errorMessagePassword} fieldID={'password'} />\n      </div>\n      <Select\n      label=\"Select Role\"\n      options={[\n        {label: 'Select Role', value: ''},\n        {label: 'Seller', value: 'seller'},\n        {label: 'DropShipper', value: 'dropshipper'},\n      ]}\n      id=\"role\"\n      error={isInvalidRole}\n      selected={roleselected}\n      onChange={(value)=>this.handleRoleChange(value)}\n    />\n        <div style={{marginTop: '4px'}}>\n        <InlineError message={'Select Role '} fieldID={'role'} />\n      </div>\n\n      <Button submit>Sign In</Button>\n      <Link url=\"/signup\">Not Resgistered?</Link>\n         </FormLayout>\n  </Form>\n      </Page>\n    );\n\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}