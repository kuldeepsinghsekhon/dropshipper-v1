{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useMemo } from \"react\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n\nvar useOptions = function useOptions() {\n  _s();\n\n  var fontSize = '16px';\n  var options = useMemo(function () {\n    return {\n      style: {\n        base: {\n          fontSize: fontSize,\n          color: \"#424770\",\n          letterSpacing: \"0.025em\",\n          fontFamily: \"Source Code Pro, monospace\",\n          \"::placeholder\": {\n            color: \"#aab7c4\"\n          }\n        },\n        invalid: {\n          color: \"#9e2146\"\n        }\n      }\n    };\n  }, [fontSize]);\n  return options;\n};\n\n_s(useOptions, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\nvar CardForm = function CardForm() {\n  _s2();\n\n  var stripe = useStripe();\n  var elements = useElements();\n  var options = useOptions();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!(!stripe || !elements)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.next = 5;\n              return stripe.createPaymentMethod({\n                type: \"card\",\n                card: elements.getElement(CardElement)\n              });\n\n            case 5:\n              payload = _context.sent;\n              console.log(\"[PaymentMethod]\", payload);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"label\", null, \"Card details\", __jsx(CardElement, {\n    options: options,\n    onReady: function onReady() {\n      console.log(\"CardElement [ready]\");\n    },\n    onChange: function onChange(event) {\n      console.log(\"CardElement [change]\", event);\n    },\n    onBlur: function onBlur() {\n      console.log(\"CardElement [blur]\");\n    },\n    onFocus: function onFocus() {\n      console.log(\"CardElement [focus]\");\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe\n  }, \"Pay\"));\n};\n\n_s2(CardForm, \"r+jKkWNz2t2V+Hx3GVT/jR+/gNw=\", false, function () {\n  return [useStripe, useElements, useOptions];\n});\n\n_c = CardForm;\nexport default CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["C:/Users/kuldeep/Downloads/aladdin-dropshiper-local/components/CardForm.js"],"names":["React","useMemo","useStripe","useElements","CardElement","useOptions","fontSize","options","style","base","color","letterSpacing","fontFamily","invalid","CardForm","stripe","elements","handleSubmit","event","preventDefault","createPaymentMethod","type","card","getElement","payload","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,yBAApD;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB,MAAMC,QAAQ,GAAG,MAAjB;AACA,MAAMC,OAAO,GAAGN,OAAO,CACrB;AAAA,WAAO;AACLO,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AACJH,UAAAA,QAAQ,EAARA,QADI;AAEJI,UAAAA,KAAK,EAAE,SAFH;AAGJC,UAAAA,aAAa,EAAE,SAHX;AAIJC,UAAAA,UAAU,EAAE,4BAJR;AAKJ,2BAAiB;AACfF,YAAAA,KAAK,EAAE;AADQ;AALb,SADD;AAULG,QAAAA,OAAO,EAAE;AACPH,UAAAA,KAAK,EAAE;AADA;AAVJ;AADF,KAAP;AAAA,GADqB,EAiBrB,CAACJ,QAAD,CAjBqB,CAAvB;AAoBA,SAAOC,OAAP;AACD,CAvBD;;GAAMF,U;;AAyBN,IAAMS,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AACrB,MAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,MAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAMI,OAAO,GAAGF,UAAU,EAA1B;;AAEA,MAAMY,YAAY;AAAA,wEAAG,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBA,cAAAA,KAAK,CAACC,cAAN;;AADmB,oBAGf,CAACJ,MAAD,IAAW,CAACC,QAHG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBASGD,MAAM,CAACK,mBAAP,CAA2B;AAC/CC,gBAAAA,IAAI,EAAE,MADyC;AAE/CC,gBAAAA,IAAI,EAAEN,QAAQ,CAACO,UAAT,CAAoBnB,WAApB;AAFyC,eAA3B,CATH;;AAAA;AASboB,cAAAA,OATa;AAcnBC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,OAA/B;;AAdmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZP,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAiBA,SACE;AAAM,IAAA,QAAQ,EAAEA;AAAhB,KACE,qCAEE,MAAC,WAAD;AACE,IAAA,OAAO,EAAEV,OADX;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbkB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAJH;AAKE,IAAA,QAAQ,EAAE,kBAAAR,KAAK,EAAI;AACjBO,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCR,KAApC;AACD,KAPH;AAQE,IAAA,MAAM,EAAE,kBAAM;AACZO,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAVH;AAWE,IAAA,OAAO,EAAE,mBAAM;AACbD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AAbH,IAFF,CADF,EAmBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACX;AAAjC,WAnBF,CADF;AAyBD,CA/CD;;IAAMD,Q;UACWZ,S,EACEC,W,EACDE,U;;;KAHZS,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n\n\n\nconst useOptions = () => {\n  const fontSize = '16px';\n  const options = useMemo(\n    () => ({\n      style: {\n        base: {\n          fontSize,\n          color: \"#424770\",\n          letterSpacing: \"0.025em\",\n          fontFamily: \"Source Code Pro, monospace\",\n          \"::placeholder\": {\n            color: \"#aab7c4\"\n          }\n        },\n        invalid: {\n          color: \"#9e2146\"\n        }\n      }\n    }),\n    [fontSize]\n  );\n\n  return options;\n};\n\nconst CardForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const options = useOptions();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const payload = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n\n    console.log(\"[PaymentMethod]\", payload);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Card details\n        <CardElement\n          options={options}\n          onReady={() => {\n            console.log(\"CardElement [ready]\");\n          }}\n          onChange={event => {\n            console.log(\"CardElement [change]\", event);\n          }}\n          onBlur={() => {\n            console.log(\"CardElement [blur]\");\n          }}\n          onFocus={() => {\n            console.log(\"CardElement [focus]\");\n          }}\n        />\n      </label>\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default CardForm;\n"]},"metadata":{},"sourceType":"module"}