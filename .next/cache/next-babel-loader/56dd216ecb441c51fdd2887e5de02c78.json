{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useMemo } from \"react\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n\nconst useOptions = () => {\n  const fontSize = '16px';\n  const options = useMemo(() => ({\n    style: {\n      base: {\n        fontSize,\n        color: \"#424770\",\n        letterSpacing: \"0.025em\",\n        fontFamily: \"Source Code Pro, monospace\",\n        \"::placeholder\": {\n          color: \"#aab7c4\"\n        }\n      },\n      invalid: {\n        color: \"#9e2146\"\n      }\n    }\n  }), [fontSize]);\n  return options;\n};\n\nconst CardForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const options = useOptions();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const payload = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n    console.log(\"[PaymentMethod]\", payload);\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"label\", null, \"Card details\", __jsx(CardElement, {\n    options: options,\n    onReady: () => {\n      console.log(\"CardElement [ready]\");\n    },\n    onChange: event => {\n      console.log(\"CardElement [change]\", event);\n    },\n    onBlur: () => {\n      console.log(\"CardElement [blur]\");\n    },\n    onFocus: () => {\n      console.log(\"CardElement [focus]\");\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe\n  }, \"Pay\"));\n};\n\nexport default CardForm;","map":{"version":3,"sources":["C:/Users/kuldeep/Downloads/aladdin-dropshiper-local/components/CardForm.js"],"names":["React","useMemo","useStripe","useElements","CardElement","useOptions","fontSize","options","style","base","color","letterSpacing","fontFamily","invalid","CardForm","stripe","elements","handleSubmit","event","preventDefault","payload","createPaymentMethod","type","card","getElement","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,yBAApD;;AAIA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,QAAQ,GAAG,MAAjB;AACA,QAAMC,OAAO,GAAGN,OAAO,CACrB,OAAO;AACLO,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AACJH,QAAAA,QADI;AAEJI,QAAAA,KAAK,EAAE,SAFH;AAGJC,QAAAA,aAAa,EAAE,SAHX;AAIJC,QAAAA,UAAU,EAAE,4BAJR;AAKJ,yBAAiB;AACfF,UAAAA,KAAK,EAAE;AADQ;AALb,OADD;AAULG,MAAAA,OAAO,EAAE;AACPH,QAAAA,KAAK,EAAE;AADA;AAVJ;AADF,GAAP,CADqB,EAiBrB,CAACJ,QAAD,CAjBqB,CAAvB;AAoBA,SAAOC,OAAP;AACD,CAvBD;;AAyBA,MAAMO,QAAQ,GAAG,MAAM;AACrB,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMI,OAAO,GAAGF,UAAU,EAA1B;;AAEA,QAAMY,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClCA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMI,OAAO,GAAG,MAAML,MAAM,CAACM,mBAAP,CAA2B;AAC/CC,MAAAA,IAAI,EAAE,MADyC;AAE/CC,MAAAA,IAAI,EAAEP,QAAQ,CAACQ,UAAT,CAAoBpB,WAApB;AAFyC,KAA3B,CAAtB;AAKAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,OAA/B;AACD,GAfD;;AAiBA,SACE;AAAM,IAAA,QAAQ,EAAEH;AAAhB,KACE,qCAEE,MAAC,WAAD;AACE,IAAA,OAAO,EAAEV,OADX;AAEE,IAAA,OAAO,EAAE,MAAM;AACbkB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAJH;AAKE,IAAA,QAAQ,EAAER,KAAK,IAAI;AACjBO,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCR,KAApC;AACD,KAPH;AAQE,IAAA,MAAM,EAAE,MAAM;AACZO,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAVH;AAWE,IAAA,OAAO,EAAE,MAAM;AACbD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AAbH,IAFF,CADF,EAmBE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACX;AAAjC,WAnBF,CADF;AAyBD,CA/CD;;AAiDA,eAAeD,QAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\n\n\n\nconst useOptions = () => {\n  const fontSize = '16px';\n  const options = useMemo(\n    () => ({\n      style: {\n        base: {\n          fontSize,\n          color: \"#424770\",\n          letterSpacing: \"0.025em\",\n          fontFamily: \"Source Code Pro, monospace\",\n          \"::placeholder\": {\n            color: \"#aab7c4\"\n          }\n        },\n        invalid: {\n          color: \"#9e2146\"\n        }\n      }\n    }),\n    [fontSize]\n  );\n\n  return options;\n};\n\nconst CardForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const options = useOptions();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const payload = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n    });\n\n    console.log(\"[PaymentMethod]\", payload);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Card details\n        <CardElement\n          options={options}\n          onReady={() => {\n            console.log(\"CardElement [ready]\");\n          }}\n          onChange={event => {\n            console.log(\"CardElement [change]\", event);\n          }}\n          onBlur={() => {\n            console.log(\"CardElement [blur]\");\n          }}\n          onFocus={() => {\n            console.log(\"CardElement [focus]\");\n          }}\n        />\n      </label>\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default CardForm;\n"]},"metadata":{},"sourceType":"module"}